"""
Django settings for nord_backend project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta 

import logging

DEBUG = True
IMPORT_DEBUG = True

class SlowOnlyFilter(logging.Filter):
    def __init__(self, threshold_ms=200):
        super().__init__()
        self.threshold = float(threshold_ms) / 1000.0  # seconds

    def filter(self, record):
        # django.db.backends logs include `duration` in seconds
        dur = getattr(record, "duration", None)
        return dur is not None and dur >= self.threshold

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "ctx": {
            "format": "%(levelname)s %(asctime)s importer %(message)s | run_id=%(run_id)s company=%(company_id)s model=%(model)s row_id=%(row_id)s"
        },
        "plain": {
            "format": "%(levelname)s %(asctime)s %(name)s %(message)s"
        },
        # IMPORTANT: let Gunicorn build the access line; we just print it.
        "gunicorn_access": {
            "format": "%(message)s"
        },
    },
    "handlers": {
        "console_plain": {
            "class": "logging.StreamHandler",
            "formatter": "plain",
            "level": "INFO",
        },
        "console_ctx": {
            "class": "logging.StreamHandler",
            "formatter": "ctx",
            "level": "DEBUG",
        },
        "gunicorn_access": {
            "class": "logging.StreamHandler",
            "formatter": "gunicorn_access",
            "level": "INFO",
        },
    },
    "loggers": {
        "importer": {
            "handlers": ["console_ctx"],
            "level": "DEBUG",
            "propagate": False,
        },
        "gunicorn.error": {
            "handlers": ["console_plain"],
            "level": "INFO",
            "propagate": False,
        },
        "gunicorn.access": {
            "handlers": ["gunicorn_access"],
            "level": "INFO",
            "propagate": False,
        },
        "django": {
            "handlers": ["console_plain"],
            "level": "INFO",
        },
        "recon": {
            "handlers": ["console_plain"],
            "level": "DEBUG",   # or INFO in prod
            "propagate": False,
        },
    },
}

LOGGING["handlers"]["console_plain"]["level"] = "DEBUG"

LOGGING["loggers"]["recon"] = {
    "handlers": ["console_plain"],
    "level": "DEBUG",           # was INFO
    "propagate": False,
}


APPEND_SLASH = True  # keep this; helps GET/HEAD without slash

# Feature flag for Retool authentication
ALLOW_RETOOL_AUTHENTICATION = True
RETOOL_AUTH_ORIGIN = "https://nordventures.retool.com"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-rc^*w^w&6g9_(uvx#6s*bnt!w)l0rdi%!l7mv#y%uc&x%wo5pk'

# SECURITY WARNING: don't run with debug turned on in production!


ALLOWED_HOSTS = ["*"]

# FORM SUBMISSION
# Comment out the following line and place your railway URL, and your production URL in the array.
# CSRF_TRUSTED_ORIGINS = ["*"]

AUTH_USER_MODEL = 'multitenancy.CustomUser'

# Application definition

INSTALLED_APPS = [
    'django.contrib.auth',
    'multitenancy',
    'django.contrib.admin',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework.authtoken',
    'rest_framework',
    'corsheaders',
    'django_filters',
    'core.apps.CoreConfig',#'core',
    'accounting',
    'hr',
    'billing',
    'ML',
    'django_celery_results',
    'pgvector.django',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    #'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'multitenancy.middleware.TenantMiddleware',
    'crum.CurrentRequestUserMiddleware',
]

ROOT_URLCONF = 'nord_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'nord_backend.wsgi.application'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        #'rest_framework.authentication.SessionAuthentication',
        #'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    "EXCEPTION_HANDLER": "core.utils.error_reporting.custom_exception_handler",
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
}

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
#postgresql://postgres:OpiRdctRUwIVWoFbhOnfBQLmIPDarkXG@caboose.proxy.rlwy.net:11644/railway

#postgresql://postgres:RredJeomPHdFbnFgXgIWSWxAQLkvbTRg@switchyard.proxy.rlwy.net:45690/railway
#postgres://postgres:a9X9kk28TgaZC_HCHo9iMawHs.ywEbvK@switchback.proxy.rlwy.net:17976/railway
#postgresql://postgres:kxHcvhsqrtHzyStXGoNxyBKwRTJmuJkY@yamanote.proxy.rlwy.net:13795/railway
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "railway",
        "USER": "postgres",
        "PASSWORD": "a9X9kk28TgaZC_HCHo9iMawHs.ywEbvK",
        "HOST": "switchback.proxy.rlwy.net",
        "PORT": "17976",          # ← must match the public URL port
        #"OPTIONS": {"sslmode": "require"},
    },
    "old": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "railway",
        "USER": "postgres",
        "PASSWORD": "kxHcvhsqrtHzyStXGoNxyBKwRTJmuJkY",
        "HOST": "yamanote.proxy.rlwy.net",
        "PORT": "13795",          # ← must match the public URL port
        #"OPTIONS": {"sslmode": "require"},
    }
}


#if os.getenv("RAILWAY_ENVIRONMENT"):
if os.environ.get('PGDATABASE'):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.environ["PGDATABASE"],
            'USER': os.environ["PGUSER"],
            'PASSWORD': os.environ["PGPASSWORD"],
            'HOST': os.environ["PGHOST"],
            'PORT': os.environ["PGPORT"],
        }
    }

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.office365.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
PASSWORD_RESET_EMAIL_COOLDOWN = int(os.getenv("PASSWORD_RESET_EMAIL_COOLDOWN", 5))  # minutes
TEMP_PASSWORD = os.getenv("TEMP_PASSWORD", 'NordTemp123')
# Celery / Redis
#CELERY_BROKER_URL = os.environ["REDIS_URL"] #
CELERY_BROKER_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")
CELERY_RESULT_BACKEND = CELERY_BROKER_URL

CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = "UTC"

# Optional task time limits (protects against runaway jobs)
CELERY_TASK_T_LIMIT = int(os.getenv("CELERY_TASK_TIME_LIMIT", 15))  # minutes
CELERY_TASK_SOFT_TIME_LIMIT = (CELERY_TASK_T_LIMIT-3)*60  # 12 minutes
CELERY_TASK_TIME_LIMIT = CELERY_TASK_T_LIMIT*60       # 15 minutes

IMPORT_MAX_BATCH_SIZE = 1000
INTEGRATION_MAX_BATCH_SIZE = 500


# ---- Embeddings config (single-source) ----
EMBED_INTERNAL_HOST = os.getenv("EMBED_INTERNAL_HOST")  # e.g. "embedding-service.railway.internal"
EMBED_PORT          = int(os.getenv("EMBED_PORT", "11434"))
EMBED_BASE_URL      = os.getenv("EMBED_BASE_URL", "https://embedding-service.up.railway.app")   # optional fallback for local/testing
EMBED_PATH          = os.getenv("EMBED_PATH", "/api/embeddings")

EMBED_MODEL         = os.getenv("EMBED_MODEL", "nomic-embed-text")
EMBED_DIM           = int(os.getenv("EMBED_DIM", "768"))
EMBED_TIMEOUT_S     = float(os.getenv("EMBED_TIMEOUT_S", "300"))
EMBED_NUM_THREAD    = int(os.getenv("EMBED_NUM_THREAD", "8"))
EMBED_KEEP_ALIVE    = os.getenv("EMBED_KEEP_ALIVE", "45m")
EMBED_BATCH_SIZE    = max(1, int(os.getenv("EMBED_BATCH_SIZE", "128")))
EMBED_LIMIT_PER_MODEL = max(1, int(os.getenv("EMBED_LIMIT_PER_MODEL", "2000")))
EMBED_API_KEY       = os.getenv("EMBED_API_KEY")  # optional; not needed for internal by default


# --- External dependencies the Chat service calls ---
EMBED_SVC_URL = EMBED_BASE_URL  # Service A
EMBED_TIMEOUT = float(os.getenv("EMBED_TIMEOUT", "15"))      # per request
EMBED_KEEP    = EMBED_KEEP_ALIVE

LLM_BASE_URL  = os.getenv("LLM_BASE_URL", "https://chat-service-production-d54a.up.railway.app")  # local Ollama on Service B
LLM_GENERATE_PATH = os.getenv("LLM_GENERATE_PATH", "/api/generate")
LLM_MODEL     = os.getenv("LLM_MODEL", "llama3.2:3b-instruct-q4_K_M")
LLM_TIMEOUT   = float(os.getenv("LLM_TIMEOUT", "30"))

LLM_BASE_URL      = os.getenv("LLM_BASE_URL", "http://chat-service.railway.internal")
LLM_GENERATE_PATH = os.getenv("LLM_GENERATE_PATH", "/api/generate")
LLM_MODEL         = os.getenv("LLM_MODEL", "llama3.2:3b-instruct-q4_K_M")
LLM_TIMEOUT_S     = float(os.getenv("LLM_TIMEOUT_S", "25"))

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_ORIGINS = [
    "https://server-production-e754.up.railway.app",
    "http://localhost:5173",
    "https://nordventures.retool.com",
    "https://82f3-8-242-11-50.ngrok-free.app",
    
]

CSRF_TRUSTED_ORIGINS = [
    "https://server-production-e754.up.railway.app",
    'http://localhost:5173', 
    "https://nordventures.retool.com",
    "https://82f3-8-242-11-50.ngrok-free.app",
    ]
